name: CI
on:
  push:
    branches: ['main']
  workflow_dispatch:
  schedule:
    - cron: '0 0,12 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Should build?
        id: should_build
        shell: bash
        run: |
          source get_buildlog.sh
          
          is_cli_latest() {
            declare -r last_cli_url=$(req https://api.github.com/repos/inotia00/revanced-cli/releases/latest - | jq -r '.assets[0].browser_download_url')
            declare -r last_cli=${last_cli_url##*/}
            cur_cli=$(sed -n 's/.*CLI: \(.*\)/\1/p' latest_build.md | xargs)
            echo "current integrations version: $cur_cli"
            echo "latest integrations version: $last_cli"
            [ "$cur_cli" != "$last_cli" ] # test success=>build, fail=>dont build
          }

          is_integrations_latest() {
            mkdir -p temp
            last_integrations_url=$(req https://api.github.com/repos/inotia00/revanced-integrations/releases/latest - | jq -r '.assets[0].browser_download_url')
            last_integrations_apk=${last_integrations_url##*/}
            last_integrations="${last_integrations_apk%.apk}-$(cut -d/ -f8 <<<"$last_integrations_url").apk"
            cur_integrations=$(sed -n 's/.*Integrations: \(.*\)/\1/p' latest_build.md | xargs)
            echo "current integrations version: $cur_integrations"
            echo "latest integrations version: $last_integrations"
            [ "$cur_integrations" != "$last_integrations" ] # test success=>build, fail=>dont build
          }

          is_patches_latest() {
            declare -r last_patches_url=$(wget -nv -O- https://api.github.com/repos/inotia00/revanced-patches/releases/latest | tr -d ' ' | sed -n 's/.*"browser_download_url":"\(.*jar\)".*/\1/p')
            declare -r last_patches=${last_patches_url##*/}
            cur_patches=$(sed -n 's/.*Patches: \(.*\)/\1/p' latest_build.md | xargs)
            echo "current patches version: $cur_patches"
            echo "latest patches version: $last_patches"
            [ "$cur_patches" != "$last_patches" ] # test success=>build, fail=>dont build
          }

          if ! git checkout update; then
            echo "first time building!"
            echo "SHOULD_BUILD=1" >> $GITHUB_OUTPUT
          elif is_cli_latest || is_integrations_latest || is_patches_latest; then
            echo "build!"
            echo "SHOULD_BUILD=1" >> $GITHUB_OUTPUT
          else
            echo "dont build!"
            echo "SHOULD_BUILD=0" >> $GITHUB_OUTPUT
          fi
    outputs:
      SHOULD_BUILD: ${{ steps.should_build.outputs.SHOULD_BUILD }}

  build:
    needs: check
    uses: ./.github/workflows/build-apk.yml
    if: ${{ needs.check.outputs.SHOULD_BUILD == 1 }}
    secrets:
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      VT_API_KEY: ${{ secrets.VT_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ENVS: ${{ secrets.ENVS }}
      STICKER_ID: ${{ secrets.STICKER_ID }}
      CHANGELOG_GITHUB_REPOSITORY: ${{ secrets.CHANGELOG_GITHUB_REPOSITORY }}
      DOWNLOAD_GITHUB_REPOSITORY: ${{ secrets.DOWNLOAD_GITHUB_REPOSITORY }}
      ASSETS_PATTERN: ${{ secrets.ASSETS_PATTERN }}
      SEND_MESSAGE: ${{ secrets.SEND_MESSAGE }}
      MESSAGE_ROOT: ${{ secrets.MESSAGE_ROOT }}
      MESSAGE_NON_ROOT: ${{ secrets.MESSAGE_NON_ROOT }}

